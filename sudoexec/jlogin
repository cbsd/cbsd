#!/usr/local/bin/cbsd
#v13.0.1
MYARG=""
MYOPTARG="inter jname remote src_session user"
MYDESC="Exec login into jail"
CBSDMODULE="jail"
ADDHELP="\
  If you are in the CBSDfile directory, these environments will always have priority\n\
  remote=1 - prevent to searching in remote node base. For the avoid the looping\n\
  user= login from the specified user. Default is: root\n\
"
EXTHELP="wf_jlogin"

# Login by jid not supported yet

. "${subrdir}"/nc.subr
cbsd_api=0
. "${cbsdinit}"
readconf jlogin.conf

try_remote()
{
	[ "${remote}" = "1" ] && err 1 "${N1_COLOR}No such jail${N0_COLOR}"
	RHST=$( jwhereis "${jname}" | ${HEAD_CMD} -n1 )
	[ -z "${RHST}" ] && err 1 "No such jail for login"

	# we don't need for interactive when come with remote=2 from select_jail_by_list
	if [ "${remote}" != "2" -a "${always_rlogin}" = "0" ]; then
		getyesno "Found jail on remote node: ${RHST}. Try to login?"
		[ $? -eq 1 -o $? -eq 3 ] && err 1 "No such jail for login"
	fi

	rexe node="${RHST}" /usr/local/bin/cbsd jlogin src_session="${nodename}" jname="${jname}" remote=1
	err 0 ""
}

init_tmux()
{
	if [ "${tmux_login}" != "1" -o -z "${src_session}" ]; then
		tmux_login=0
		return 0
	fi

	tmuxcmd=$( which tmux 2>/dev/null )

	src_session="$( ${WHOAMI_CMD} )-nodename"
	session_name="${src_session}-${jname}"

	if [ -n "${tmuxcmd}" ]; then
		# tmux here and we preferred them
		return 0
	fi

	# no tmux here
	tmux_login=0
	return 0
}


login_internal()
{
	local _res
	local _formfile

	#rctl/limits area
	. "${subrdir}"/rctl.subr

	_formfile="${jailsysdir}/${jname}/helpers/jrctl.sqlite"
	[ -r "${_formfile}" ] && nice=$( cbsdsqlro "${_formfile}" "SELECT cur FROM forms WHERE param=\"nice\"" )
	[ -z "${nice}" ] && nice="0"

	if [ "${exec_fib}" -eq 0 ]; then
		SETFIB=""
	else
		SETFIB="${SETFIB_CMD}  ${exec_fib}"
	fi

	if [ "${cpuset}" = "0" ]; then
		CPUSET=""
	else
		CPUSET="${CPUSET_CMD} ${cpuset}"
	fi

	case "${ver}" in
		"empty")
			# is linux?
			if [ -f "${data}/bin/bash" ]; then
				LOGIN_STR="/bin/bash"
			elif [ -f "${data}/bin/sh" ]; then
				LOGIN_STR="/bin/sh" ];
			else
				err 1 "${N1_COLOR}Unknown environment, unable to login${N0_COLOR}"
			fi
			;;
		*)
			if [ "${user}" != "root" ]; then
				# additional check for user existance
				_res=$( ${PW_CMD} -R "${path}" usershow "${user}" 2>&1 )
				[ $? -ne 0 ] && err 1 "${N1_COLOR}Unable to find user: ${_res}${N0_COLOR}"
			fi

			if [ "${emulator}" != "jail" -a -n "${emulator}" ]; then
				. "${subrdir}"/emulator.subr
				init_usermode_emul
				# inherit emulator_flags
				LOGIN_STR="/bin/${emulator} ${LOGIN_CMD} -f ${user}"
			else
				LOGIN_STR="${LOGIN_CMD} -f ${user}"
			fi
			;;
	esac

	if [ "${platform}" = "DragonFly" ]; then
		jexec="/usr/bin/nice -n ${nice} ${JEXEC_CMD} ${jid} ${LOGIN_STR}"
	else
		jexec="/usr/bin/nice -n ${nice} ${SETFIB} ${CPUSET} ${JEXEC_CMD} ${jid} ${LOGIN_STR}"
	fi
	init_tmux

	cbsdlogger NOTICE "${CBSD_APP}": executing jexec string for login: "${jexec}"

	if [ ${tmux_login} -eq 1 ]; then
		${tmuxcmd} list-sessions | ${GREP_CMD} -qwF "${session_name}:"
		if [ $? -eq 1 ]; then
			${tmuxcmd} new -s "${session_name}" "eval ${jexec}"
		else
			${tmuxcmd} attach-session -t "${session_name}"
		fi
	else
		eval "${jexec}"
	fi
}

login_custom()
{
	# reset PATH to default
	local CBSDPATH="${PATH}"
	# reset CBSD PATH
	export PATH="/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin"
	. "${subrdir}"/jcreate.subr	# for export_jail_data_for_external_hook
	export_jail_data_for_external_hook
	readconf jlogin.conf
	${ECHO} "${N1_COLOR}Custom login command: ${N2_COLOR}${login_cmd}${N0_COLOR}"
	exec /bin/sh -c "${login_cmd}"
	# restore CBSD PATH
	export PATH="${CBSDPATH}"
}

# check for cloud function when CBSDfile exist
Makefile="${CBSD_PWD}/CBSDfile"
if [ -r "${Makefile}" ]; then
	[ -z "${CBSDFILE_RECURSIVE}" ] && ${ECHO} "${N1_COLOR}found CBSDfile: ${N2_COLOR}${Makefile}${N0_COLOR}"
	. "${Makefile}"

	all_jail_list=$( ${EGREP_CMD} '^jail_[a-zA-Z0-9_@%:][-a-zA-Z0-9_@%:]*\(\)$' "${Makefile}" | ${XARGS_CMD} | ${TR_CMD} -d "()" | ${SED_CMD} s#jail_##g )
	[ -z "${all_jail_list}" ] && err 1 "${N1_COLOR}${CBSD_APP}: no jail found${N0_COLOR}"
	[ -z "${jname}" ] && jname=$1

	if [ -n "${jname}" ]; then
		found=0
		for i in ${all_jail_list}; do
			if [ "${i}" = "${jname}" ]; then
				found=1
				break
			fi
		done
		[ ${found} -eq 0 ] && err 1 "${N1_COLOR}${CBSD_APP}: no such jail: ${N2_COLOR}${jname}${N0_COLOR}"
		all_jail_list="${jname}"
	fi

	if [ -n "${CLOUD_URL}" -a -n "${CLOUD_KEY}" ]; then
		cbsd_api=1
	else
		cbsd_api=0
	fi
else
	cbsd_api=0
fi

if [ ${cbsd_api} -eq 1 ]; then
	CURL_CMD=$( which curl )
	JQ_CMD=$( which jq )
	[ -z "${CURL_CMD}" ] && err 1 "${N1_COLOR}cloud up requires curl, please install: ${N2_COLOR}pkg install -y curl${N0_COLOR}"
	[ -z "${JQ_CMD}" ] && err 1 "${N1_COLOR}cloud up requires jq, please install: ${N2_COLOR}pkg install -y textproc/jq${N0_COLOR}"
	[ -z "${CBSDFILE_RECURSIVE}" ] && ${ECHO} "${N1_COLOR}main cloud api: ${N2_COLOR}${CLOUD_URL}${N0_COLOR}" 1>&2
	_cid=$( ${MD5_CMD} -qs "${CLOUD_KEY}" )

	for jname in ${all_jail_list}; do
		[ -z "${jname}" ] && return 1
		_ssh=$( ${CURL_CMD} --no-progress-meter -H "cid:${_cid}" "${CLOUD_URL}"/api/v1/status/"${jname}" 2>&1 )
		_ret=$?
		if [ ${_ret} -ne 0 ]; then
			${ECHO} "${N1_COLOR}${CBSD_APP} error: curl error1: ${N2_COLOR}${_ssh}${N0_COLOR}"
			${ECHO} "${CURL_CMD} --no-progress-meter -H \"cid:XXXXX\" ${CLOUD_URL}/api/v1/status/${jname}"
			continue
		fi
		_ssh_string=$( echo "${_ssh}" | ${JQ_CMD} '.ssh_string' | ${TR_CMD} -d '"' )
		_ssh_pref=$( substr --pos=0 --len=3 --str="${_ssh_string}" )
		if [ "${_ssh_pref}" != "ssh" ]; then
			${ECHO} "${N1_COLOR}${CBSD_APP} error: curl error2, no ssh_string:\n${N2_COLOR}${_ssh}${N0_COLOR}"
			${ECHO} "${CURL_CMD} --no-progress-meter -H \"cid:XXXXX\" ${CLOUD_URL}/api/v1/status/${jname}"
			continue
		fi
		_ssh_len=$( strlen "${_ssh_string}" )
		_ssh_post=$( substr --pos=5 --len="${_ssh_len}" --str="${_ssh_string}" )
		#echo "${SSH_CMD} ${_ssh_post}"
		# rewrite
		if [ -n "${SUDO_USER}" ]; then
			if [ -r /home/"${SUDO_USER}"/.ssh/id_ed25519 ]; then
				_ssh_sudo_arg="-oIdentityFile=/home/${SUDO_USER}/.ssh/id_ed25519"
			elif [ -r /home/"${SUDO_USER}"/.ssh/id_rsa ]; then
				_ssh_sudo_arg="-oIdentityFile=/home/${SUDO_USER}/.ssh/id_rsa"
			else
				date
			fi
		fi
		jexec_cmd="${SSH_CMD} -tt -oStrictHostKeyChecking=no -oConnectTimeout=5 -oServerAliveInterval=10 ${_ssh_sudo_arg} ${_ssh_post}"
		echo "[debug] exec: ${jexec_cmd}"
		${jexec_cmd}
	done
	exit 0
fi

if [ -z "${user}" ]; then
	user="root"
else
	shift
fi

emulator="jail"		# for jname_is_multiple
jname_is_multiple	# import jail_list if jname is mask

if [ -n "${jail_list}" ]; then
	${ECHO} "${N1_COLOR}Found jails by mask: ${N2_COLOR}${jail_list}${N0_COLOR}"
	for jname in ${jail_list}; do
		${ECHO} "${N1_COLOR}exec jlogin to: ${N2_COLOR}${jname}${N0_COLOR}"
		jlogin jname="${jname}"
	done
	exit 0
fi

[ -z "${jname}" ] && jname=$1
[ -z "${jname}" ] && select_jail_by_list -s "List of online jail" -a "On" -r "${sqlreplica}"
[ -z "${jname}" ] && err 1 "${N1_COLOR}Please specify jname as argument${N0_COLOR}"
[ -z "${remote}" ] && remote=0

validate_jname "${jname}" || err 1 "${N1_COLOR}Bad jname${N0_COLOR}"

. "${subrdir}"/rcconf.subr
[ $? -eq 1 ] && try_remote
[ "${emulator}" = "bhyve" ] && err 1 "${N1_COLOR}for bhyve please use: ${N2_COLOR}cbsd blogin=${jname} ${N1_COLOR}instead${N0_COLOR}"
[ "${baserw}" = "1" ] && path=${data}
[ "${jid}" -eq 0 ] && err 1 "not running"

readconf jlogin.conf

cbsdlogger NOTICE "${CBSD_APP}": login into "${jname}"

case "${login_cmd}" in
	internal)
		login_internal
		;;
	*)
		login_custom
		;;
esac

exit 0
