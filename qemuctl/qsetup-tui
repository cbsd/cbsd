#!/usr/local/bin/cbsd
#v12.1.9

. ${subrdir}/nc.subr
. ${strings}
. ${tools}

[ ! -f "${distsharedir}/jail-arg" ] && err 1 "No such jail-arg skel"
. ${distsharedir}/jail-arg
CBSDMODULE="qemu"
MYDESC="dialog-based text user interface for qemu VM configuration"
MYARG="jname"
MYOPTARG="${JARG} outfile"
ADDHELP="
${H3_COLOR}Description${N0_COLOR}:

Text user interface for qemu VM configuration. This script invoked by 'cbsd qconfig'.

${H3_COLOR}Options${N0_COLOR}:

 ${N2_COLOR}jname=${N0_COLOR}     - work with <VM>;

${H3_COLOR}Examples${N0_COLOR}:

 # cbsd bsetup-tui jname=vm1

${H3_COLOR}See also${N0_COLOR}:

  cbsd qconfig --help
  cbsd qget --help
  cbsd qset --help

"

. ${cbsdinit}
. ${subrdir}/settings-tui.subr
. ${subrdir}/settings-tui-virtual.subr
. ${subrdir}/settings-tui-qemu.subr
. ${dialog}

commit()
{
	local _oldjname _newjname TMPVAL

	_oldjname="${jname}"

	for i in ${JARG}; do
		eval VAL=\$$i
		eval OVAL=\$OLDVAL_${i}

		if [ "${i}" = "jname" ]; then
			_oldjname="${OVAL}"
			_newjname="${VAL}"
			continue
		fi

		if [ "${i}" = "vm_ram" ]; then
			# In SQLite3 we store vm_ram in bytes, convert it
			# test for human
			if is_number ${VAL}; then
				if conv2bytes ${VAL}; then
					VAL="${convval}"
				fi
			else
				# Assume than user input in MB, so convert to bytes
				VAL=$(( convval * 1024 * 1024 ))
			fi
		fi

		[ "${VAL}" = "${OVAL}" ] && continue

		if [ "${i}" = "vm_ram" ]; then
			# In SQLite3 we store vm_ram in bytes, convert it
			VAL=$(( VAL / 1024 / 1024 ))
		fi

		# convert spaces to '%' for qset ( see todo in init func from nc.subr for val="one two" )
		TMPVAL=$( echo "${VAL}" | ${TR_CMD} ' ' '%' )

		qset mode=quiet jname=${_oldjname} ${i}="${TMPVAL}"
	done

	[ "${_oldjname}" != "${_newjname}" -a -n "${_newjname}" ] && cbsd qrename old=${_oldjname} new=${_newjname}

	exit 0
}


store_defaults()
{
	local i VAL

	eval $( for i in "jname" ${JARG}; do
		[ "${i}" = "repo" ] && repo=1 && continue
		eval VAL=\$$i
		echo "OLDVAL_${i}=\"${VAL}\""
	done )
}


dialog_menu_main()
{
	title=" Config for ${jname} VM "
	hline=
	local defaultitem=

	local menu_list="
		'EXIT'  'EXIT'  'Exit jconstruct-tui'
	" # END-QUOTE

	local i _mytest skip
	local _checkbox="astart protected hidden qemu_generate_acpi qemu_wire_memory qemu_rts_keeps_utc qemu_force_msi_irq qemu_x2apic_mode qemu_mptable_gen qemu_ignore_msr_acc xhci tablet fbuf jailed chrooted double_acpi virtio_rnd"

	# don't show it in main menu:
	local _in_sub_menu="qemu_generate_acpi qemu_wire_memory qemu_rts_keeps_utc qemu_force_msi_irq qemu_x2apic_mode qemu_mptable_gen qemu_ignore_msr_acc cd_vnc_wait qemu_vnc_resolution qemu_vnc_tcp_bind \
	vnc_password qemu_vnc_vgaconf on_crash on_poweroff on_reboot double_acpi virtio_rnd qemurun_wrapper qemustop_wrapper boot_delay usb xhci tablet machine machine_accel vga spice_default vm_spice_port \
	qemu_spice_tcp_bind qemu_spice_resolution qemu_spice_flags spice_password soundhw jailed kernel bios cpu"

	item_let="A"
	item_num=0

	 f_dialog_default_fetch defaultitem

	# checkbox mark
	for i in ${_checkbox}; do
		eval _mytest=\$$i
		if [ "${_mytest}" = "1" ]; then
			export ${i}_mark="X"
		else
			export ${i}_mark=" "
		fi
	done

	for i in ${JARG}; do
		skip=0

		# skip for _in_sub_menu list item:
		for y in ${_in_sub_menu}; do
				[ "${i}" = "${y}" ] && skip=1
		done

		[ ${skip} -eq 1 ] && continue

		for x in ${_checkbox}; do

			[ ${skip} -eq 1 ] && break

			if [ "${x}" = "${i}" ]; then

				if [ "${x}" = "tablet" ]; then
					# skip tablet when xhci off
					[ "${xhci}" = "0" ] && skip=1 && break
				fi


				eval _mytest=\$${x}_mark
				[ -z "${_mytest}" ] && _mytest=" "
				inc_menu_index item_let
				menu_list="${menu_list} '${item_let} ${x}'      '[${_mytest}]'  '${_mydesc}'"
				skip=1
			fi

		done

		[ ${skip} -eq 1 ] && continue

		inc_menu_index item_let

		eval VAL=\$$i

		if [ "${i}" = "vm_ram" ]; then
			# test for human
			if ! is_number ${VAL}; then
				if conv2human "${VAL}"; then
					VAL=${convval}
					vm_ram="${VAL}"
				fi
			fi
		fi

		if [ -z "${VAL}" ]; then
			menu_list="${menu_list} '${item_let} ${i}'	' '	'Descr?'"
		else
			menu_list="${menu_list} '${item_let} ${i}'	'${VAL}'	'Descr?'"
		fi
	done

	menu_list="${menu_list} '-'	'-' ''"
#	menu_list="${menu_list} 'qemu_controller'	'Controller config >>'	'cbsd qemu-controller-tui'"
#	inc_menu_index item_num

	menu_list="${menu_list} 'qemudsk'		'Storage config >>'	'cbsd qemu-dsk-tui'"
	inc_menu_index item_num

	menu_list="${menu_list} 'qemunic'		'Network config >>'	'cbsd qemu-nic-tui'"
	inc_menu_index item_num

#	menu_list="${menu_list} 'qemu_audio_options'	'Audio options >>'	'audio opt: ${soundhw}'"
#	inc_menu_index item_num

	menu_list="${menu_list} 'qemu_options'			'Qemu options >>'	'customize qemu options: acpi:${qemu_generate_acpi}, wire:${qemu_wire_memory} rts_utc:${qemu_rts_keeps_utc} msi:${qemu_force_msi_irq} x2apic:${qemu_x2apic_mode} mptable:${qemu_mptable_gen} ign_acc:${qemu_ignore_msr_acc}'"
	inc_menu_index item_num

	menu_list="${menu_list} 'qemu_vnc_options'	'VNC options >>'	'customize VNC options: cd_wait:${cd_vnc_wait} resolution:${qemu_vnc_resolution} bind:${qemu_vnc_tcp_bind}'"
	inc_menu_index item_num

#	menu_list="${menu_list} 'qemu_flags'		'Additional qemu_flags'	'customize additional qemu_flags. Current: ${qemu_flags}'"

	menu_list="${menu_list} 'order'			'Boot order >>'			'cbsd border-tui'"
#	menu_list="${menu_list} 'cd_boot_firmware'	'Select CD boot firmware'	'change CD boot firmware.'"
#	menu_list="${menu_list} 'hdd_boot_firmware'	'Select HDD boot firmware'	'change HDD boot firmware.'"
	menu_list="${menu_list} 'exit_behavior'		'Exit behavior settings'	'exit behavior settings: poweroff:${on_poweroff},reboot:${on_reboot},crash:${on_crash}'"

	menu_list="${menu_list} '-'	'-' ''"
	menu_list="${menu_list} 'COMMIT'	'Save changes and quit'	'Save!'"

	cbsd_menubox
	retval=$?

	f_dialog_data_sanitize menu_choice
	f_dialog_menutag_store "$menu_choice"
	f_dialog_default_store "$menu_choice"

	return $retval
}

### MAIN
readconf qemu-default-default.conf
. ${subrdir}/rcconf.subr
[ $? -eq 1 ] && err 1 "${N1_COLOR}no such jail: ${N2_COLOR}${jname}${N0_COLOR}"
[ "${emulator}" != "qemu" ] && err 1 "${N1_COLOR}Only for qemu type VMs${N0_COLOR}"

shift #skip for jname

JARG="$@"

f_dialog_title "$msg_system_console_configuration"
f_dialog_backtitle "${ipgm:+bsdconfig }$pgm"
f_mustberoot_init

store_defaults

# fill promt variable used in dialog_menu_main about active jail status
# otherwise - append the argument that we can change also and jname.
if [ ${jid} -ne 0 ]; then
	prompt="VM is ONLINE!\nSome parameters require a bstop/bstart cycle!"
else
	JARG="jname ${JARG}"
fi

while [ 1 ]; do
	dialog_menu_main || f_die

	index=${mtag%% *}
	mychoice=${mtag##* }

	case "${mychoice}" in
		"-")
			continue
			;;
		"qemu_options")
			get_construct_qemu_options
			;;
		"qemu_vnc_options")
			get_construct_qemu_vnc_options
			;;
		"qemunic")
			qemu-nic-tui jname=${jname}
			;;
		"qemudsk")
			qemu-dsk-tui jname=${jname}
			;;
		"qemu_controller")
			qemu-controller-tui jname=${jname}
			;;
		b_order|order)
			border-tui jname="${jname}"
			b_order=$( cbsdsqlro local "SELECT b_order FROM jails WHERE jname=\"${jname}\"" 2>/dev/null )
			;;
		"EXIT")
			f_die
			;;
		"COMMIT")
			commit
			;;
		astart|protected|hidden|qemu_generate_acpi|qemu_wire_memory|qemu_rts_keeps_utc|qemu_force_msi_irq|qemu_x2apic_mode|qemu_mptable_gen|qemu_ignore_msr_acc|xhci|tablet|fbuf|jailed|chrooted|double_acpi|virtio_rnd)
			invert_checkbox ${mychoice}
			continue
			;;
		interface)
			get_construct_interface -d 1 -s "tap bridge vboxnet"
			;;
		qemu_audio_options)
			soundhw_play=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite SELECT soundhw_play FROM qemu_soundhw 2>/dev/null )
			soundhw_rec=$( cbsdsqlro ${jailsysdir}/${jname}/local.sqlite SELECT soundhw_rec FROM qemu_soundhw 2>/dev/null )
			get_construct_qemu_audio_options -u
			;;
		*)
			get_construct_${mychoice}
			;;
	esac
done

exit 0
