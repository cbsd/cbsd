#!/usr/local/bin/cbsd
#v11.1.4
MYARG="jname"
CBSDMODULE="qemu"

. ${subrdir}/nc.subr
. ${distsharedir}/qemu_settings.conf

#concat for qemu arg
JARG="${MYCOL} nice gid"

MYOPTARG="jconf ${JARG}"
MYDESC="Modify parameters for qemu domain"
ADDHELP="
${H3_COLOR}Description${N0_COLOR}:

You can change VM options using arguments or config file.
Some parameters can be applied while the VM is running,
but most will require a VM restart.

You can change multiple parameters at one time separated by space.

For interactive (dialog(1)-based) edit, please use 'cbsd qconfig' instead.

${H3_COLOR}Options${N0_COLOR}:

 ${N2_COLOR}jconf=${N0_COLOR}     - <path_to_file>, load and set settings from jconf
 ${N2_COLOR}mode=${N0_COLOR}      - set 'force' for modification on the running qemu

${H3_COLOR}Examples${N0_COLOR}:

 # cbsd qset jname=myvmm vm_ram="4g"
 # cbsd qset jname='*' cpus=8 xhci=0

${H3_COLOR}See also${N0_COLOR}:

  cbsd qget --help
  cbsd qconfig --help

"

. ${tools}
. ${strings}
. ${cbsdinit}

emulator="qemu"	# for jname_is_multiple
jname_is_multiple

if [ -n "${jail_list}" ]; then
	new_arg=

	for i in $*; do
		_is_jname=$( substr --pos=0 --len=5 --str=${i} )
		[ "${_is_jname}" = "jname" ] && continue
		new_arg="${new_arg} ${i}"
	done

	for jname in ${jail_list}; do
		qset jname=${jname} ${new_arg}
	done
	exit 0
fi

if [ "${mod_cbsd_queue_enabled}" = "YES" -a -z "${MOD_CBSD_QUEUE_DISABLED}" ]; then
	readconf cbsd_queue.conf
	[ -z "${cbsd_queue_backend}" ] && MOD_CBSD_QUEUE_DISABLED="1"
fi

update_jails()
{
	eval TMPVAL="\$$i"

	# restore spaces from '%' ( see todo in init func from nc.subr for val="one two" )
	VAL=$( echo "${TMPVAL}" | ${TR_CMD} '%' ' ' )

	case "${i}" in
		vm_ram)
			if is_number ${VAL}; then
				if conv2bytes ${VAL}; then
					VAL="${convval}"
				fi
			else
				# Assume value in MB, convert it to bytes
				VAL=$(( ${VAL} * 1024 * 1024 ))
			fi
			;;
	esac

	[ -z "${i}" ] && return 0

	case "${i}" in
		nice)
			_formfile="${jailsysdir}/${jname}/helpers/brctl.sqlite"
			if [ ! -r ${_formfile} ]; then
				${ECHO} "${N1_COLOR}No such rctl file: ${N2_COLOR}${_formfile}${N0_COLOR}"
				return 1
			fi
			cbsdsqlrw ${_formfile} UPDATE forms set cur=\"${VAL}\" WHERE param=\"nice\"
			brenice jname=${jname}
			;;
		ip4_addr)
			cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite UPDATE settings SET ${i}=\"${VAL}\"
			# back compatible
			cbsdsqlrw local UPDATE jails SET ${i}=\"${VAL}\" WHERE jname=\"${jname}\"
			if [ -f "${jailsysdir}/${jname}/rc.conf_${jname}" ]; then
				# current setting used by cloud-init helper/blogin
				${SYSRC_CMD} -qf ${jailsysdir}/${jname}/rc.conf_${jname} ${i}="${VAL}" > /dev/null 2>&1
			fi
			;;
		*)
			cbsdsqlrw ${jailsysdir}/${jname}/local.sqlite UPDATE settings SET ${i}=\"${VAL}\"
			# back compatible
			case "${i}" in
				vm_cpus|vm_ram)
					cbsdsqlrw local UPDATE qemu SET ${i}=\"${VAL}\" WHERE jname=\"${jname}\"
					;;
			esac
			;;
	esac

	cbsdlogger NOTICE ${CBSD_APP}: ${argpart}: ${VAL}
	${ECHO} "${argpart}: ${N1_COLOR}changed${N0_COLOR}"
}

## MAIN
# here we get status from jstatus, not via jrcconf for non-overwriting params in args
jid=$( jstatus jname=${jname} )
[ $? -eq 0 ] && err 1 "${N1_COLOR}No such qemu: ${N2_COLOR}${jname}${N0_COLOR}"

if [ -n "${jconf}" ]; then
	[ ! -r "${jconf}" ] && err 1 "${N1_COLOR}No such jconf file: ${N2_COLOR}${jconf}${N0_COLOR}"
	#jset jname=${jname} `${GREP_CMD} -v '#' ${jconf} | ${GREP_CMD} .| ${TR_CMD} -d ";"`
	my_arg=$( ${GREP_CMD} -v '#' ${jconf} | ${GREP_CMD} . | ${TR_CMD} -d ";" | ${SED_CMD} 's/"/\\"/g' | ${XARGS_CMD} )
	exec /bin/sh << EOF
/usr/local/bin/cbsd qset jname=${jname} "${my_arg}" autorestart=${autorestart}
EOF
	exit 0
fi

if [ "${mod_cbsd_queue_enabled}" = "YES" -a -z "${MOD_CBSD_QUEUE_DISABLED}" ]; then
	allstr="$@"
	[ -n "${cbsd_qemu_queue_name}" ] && ${cbsd_queue_backend} cbsd_queue_name=${cbsd_qemu_queue_name} id="${jname}" cmd=update ${allstr}
fi

for n in "$@"; do
	argpart="${n%%=*}"

	for i in ${JARG}; do
		if [ "${argpart}" = "${i}" -a "${argpart}" != "jname" ]; then
			update_jails
		fi
	done
done

# exit code 0 is nessesary for dot()
exit 0
