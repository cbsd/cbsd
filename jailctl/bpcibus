#!/usr/local/bin/cbsd
#v12.0.6
CBSDMODULE="bhyve"
MYARG="jname mode"
MYOPTARG="display header select device_name"
MYDESC="Operate with bhyve PCI bus map"
ADDHELP="mode=[list|reset]\n\
  mode=get - get PCI bus for specified device (device_name= required, select= - optional)\n\
  mode=list - show current PCI bus map\n\
  mode=reset - reset and re-order devices\n\
select - change SQL query for get, e.g: select=\"pcislot_bus,pcislot_pcislot,pcislot_function,pcislot_desc\"\
device_name - pciclot_name of device for select in mode=get, e.g: virtio-net\n\
header=0 don't print header\n\
display= list by comma for column. Default: pcislot_name,pcislot_bus,pcislot_pcislot,pcislot_function,pcislot_desc\n"

. "${subrdir}"/nc.subr
. "${tools}"
. "${strings}"

select="pcislot_bus"		# by default, select PCI bus
device_name=

. "${cbsdinit}"

. "${subrdir}"/rcconf.subr
[ "${emulator}" != "bhyve" ] && log_err 1 "${N1_COLOR}Not in bhyve emulator: ${N2_COLOR}${jname}${N0_COLOR}"

[ -z "${display}" ] && display="pcislot_name,pcislot_bus,pcislot_pcislot,pcislot_function,pcislot_desc"

#remove commas for loop action on header
mydisplay=$( echo ${display} | ${TR_CMD} ',' '  ' )

# upper for header
myheader=$( echo "${mydisplay}" | ${TR_CMD} '[:lower:]' '[:upper:]' )

show_header()
{
	local _header="${H1_COLOR}${BOLD}${myheader}${N0_COLOR}"
	[ "${header}" -ne 0 ] && ${ECHO} "${_header}"
}

# if $1 = "Unregister" then overwrite status to "Unregister"
populate_output_data()
{
	local _i _val src_size

	_status=

	#populate values for in output string
	for _i in ${mydisplay}; do
		_val=
		eval _val=\$"$_i"
		[ -z "${_val}" ] && _val="-"
		if [ -z "${_status}" ]; then
			_status="${N0_COLOR}${_val}"
		else
			_status="${_status} ${_val}"
		fi
	done
}


# $1 - which file from. Eg: local
show_basesdata_from_sql()
{
	local _i

	#   set sqlfile for ". rcconf" including
	if [ -n "${1}" ]; then
		sqlfile="$1"
	else
		sqlfile="local"
	fi

	_sql="SELECT pcislot_name,pcislot_bus,pcislot_pcislot,pcislot_function,pcislot_desc FROM pcibus"

	OIFS="${IFS}"
	IFS="|"
	sqldelimer="|"

	cbsdsqlro ${sqlfile} "${_sql}" | while read pcislot_name pcislot_bus pcislot_pcislot pcislot_function pcislot_desc; do
		IFS="${OIFS}"
		populate_output_data
		printf "${N2_COLOR}"
		printf "${_status}"
		printf "${N0_COLOR}\n"
		IFS="|"
	done
	IFS="${OIFS}"
}

show_remote()
{
	show_header

	[ -z "${node}" ] && node=$( node mode=list header=0 allinfo=0 )

	for _n in ${node}; do
		nodename="${_n}"
		show_basesdata_from_sql "inv.${_n}"
	done
}

show_local()
{
	local _errcode _status

	show_header
	show_basesdata_from_sql "${jailsysdir}"/"${jname}"/local.sqlite
}

show_pcibus_map()
{
	if [ -n "${node}" ]; then
		show_remote
		exit
	fi

	show_local
}

#### MAIN
[ -z "${header}" ] && header=1

case "${mode}" in
	get)
		[ -z "${device_name}" ] && err 1 "${N2_COLOR}device_name= ${N1_COLOR} is mandatory${N0_COLOR}"
		_sql="SELECT ${select} FROM pcibus WHERE pcislot_name=\"${device_name}\""
		sqllistdelimer=" "
		cbsdsqlro "${jailsysdir}"/"${jname}"/local.sqlite "${_sql}"
		;;
	list)
		sqllistdelimer=" "
		show_pcibus_map | /usr/bin/column -t
		;;
	reset)
		# truncate pcibus_run table
		cbsdsqlrw "${jailsysdir}"/"${jname}"/local.sqlite DELETE FROM pcibus
		${ECHO} "${N1_COLOR}Purge pcibus table for: ${N2_COLOR}${jname}${N0_COLOR}"
		;;
	*)
		err 1 "${N1_COLOR}Unknown mode ${mode}, valid: ${N2_COLOR}list,reset${N0_COLOR}"
esac


